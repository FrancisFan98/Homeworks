			   __________________

			    LAB 03 QUESTIONS
			   __________________


- Name: (FILL THIS in)
- NetID: (THE kauf0095 IN kauf0095@umn.edu)

Answer the questions below according to the lab specification. Write
your answers directly in this text file and submit it to complete the
lab.


PROBLEM 1: C Text and Binary I/O
================================

  Examine the code blocks below which involve I/O with text and binary
  data. Each example contains a logic error which will lead to
  problems. Describe what the correction is and provide code if needed.


A
~

  ,----
  | FILE *fin = fopen(...,"r");
  | int buf[4];             // store 4 ints from file in this array 
  | fread(buf, 4, 1, fin);  // want to read 4 ints from fin into buf (error)
  `----
  Describe why the marked line is an error and provide a correction.

  It is only reading one integer at a time. To store this one integer, we should use &buf[index].


B
~

  ,----
  | FILE *fout = fopen(“”,”w”);
  | int length = ...;
  | double *buf = malloc(length*sizeof(double)); 
  | // fill in buf with values
  | for(int i=0; i<length; i++){           // write ints from buf one at a time
  |   fwrite(&buf[i], sizeof(double), 1, fout);   // error
  | }
  `----
  
  the first argument of fwrite() should be a pointer to the address where stores the data.


C
~

  ,----
  | FILE *fin = fopen(...,"r");
  | char buf[100];             // store up to 100 characters
  | int pos = 0;
  | while(1){
  |   int result = fscanf(fin, "%d", &buf[pos]);
  |   if(result == EOF){
  |     break;
  |   }
  |   pos++;
  | }
  | // error in logic, may overflow buf: why?
  `----

  because buf can only store 100 characters

C
~

  ,----
  | // read two binary ints from given file, return pointer to them
  | int *read_2_ints(char *fname){  
  |   FILE *fin = fopen(fname,"r");
  |   int buf = malloc(2*sizeof(int));
  |   fread(buf, sizeof(int), 2, fin);
  |   return buf;  // compile error
  | }
  `----

  change to malloc
  


PROBLEM 2: Number conversions
=============================

A
~

  Fill in the following table of equivalences.  Filling in the table
  from top to bottom is advantageous as earlier rows can sometimes be
  used to infer lower values. Feel free to make use of any ASCII table
  or the table.c program provided in the week 3 lecture code pack.

   Dec   Hex  Oct  Binary     Char         
  -----------------------------------------
     9  0x09   11  0000 1001  TAB          
    10  0x0A   12  0000 1010  \n (newline) 
    32  0x20   40  0010 0000  SPACE        
    50  0x32   62  0011 0010  2              
    65  0x41  101  0100 0001  A            
    66  0x42  102  0100 0010  B                      
    79  0x4F  117  0100 1111  O            
    80  0x50  120  0101 0000  P            
    91  0x5B  133  0101 1011  [            
    97  0x61  141  0110 0001  a                        
   122  0x7a  172  0111 1010  z            
   145  0x91  221  1001 0001  none         
   160  0xa0  240  1010 0000  none         
   180  0xB4  264  1011 0100  none         
   255  0xff  377  1111 1111  none         


B
~

  Fill in the bits, hex, and decimal values for the given examples. The
  first example is completed for you. Assume all of these are 32 bit
  unsigned integers.
  ,----
  | COMPLETED
  | Binary:   0000 0000  0000 0000  0001 1000  1110 1001  
  | 	  0    0     0    0     1    8     E    9
  | Hex   :   0018E9
  | Decimal:  6377
  | 
  | 
  | NUMBER 1
  | Binary:   0000 0000  0010 1111  0011 1010  1000 1101  
  | 	  
  | Hex   :   0x2f3a8d
  | Decimal:  3095181
  | 
  | 
  | NUMBER 2
  | Binary:   111 1111 1000 0011 0101 1010 0000 1011 
  | 	  7    F     8    3     5    A     0    B
  | Hex   :   7F835A0B
  | Decimal: 2139314699
  `----


PROBLEM 3: Signed Integer Conversions
=====================================

A
~

  Apply the steps involved in converting the following positive binary
  number to it's two's complement negation in 8-bit signed
  format. Recall the steps are
  - Subtract 1
  - Invert the bits
  ,----
  | 0111 1100  = 0x7C = 124 (decimal)
  `----

    0111 1101
    1000 0010
  The result is the two's complement representation of -124.

  Reverse the process by
  - Invert the bits   0111 1101
  - Add one           0111 1100
  to show that the original bits are gotten back.


B
~

  Complete the following table of equivalences assuming 8-bit
  twos-complement signed integers. The rightmost column is the inverse
  of the binary representation: flip 1's to 0's, and vice versa.

    Dec   Hex  Binary     Inverse   
  ----------------------------------
     +5  0x05  0000 0101  1111 1010 
     -5  0xfb  1111 1011  0000 0100          
    +32  0x20  0010 0000  1101 1111                  
    -32  0xE0  1110 0000  0001 1111 
   +127  0x7F  0111 1111  1000 0000                    
   -127  0x81  1000 0001  0111 1110                     
   -128  0x80  1000 0000  0111 1111          
     +2  0x02  0000 0010  1111 1101                        
     -2  0xFE  1111 1110  0000 0001                      
     +1  0x01  0000 0001  1111 1110          
     -1  0xff  1111 1111  0000 0000          
      0  0x00  0000 0000  1111 1111                            


PROBLEM 4: Converting Strings to Numbers
========================================

  Inspect the program in the lab pack called `convert.c'.  Compile and
  run it using
  ,----
  | > gcc convert.c
  | > ./a.out
  `----
  Describe briefly what kind of conversion is being done by the
  `convert()' function given.
  - A. What kind of data is input?
input is a string to be converted into integer, and a pointer to store that integer
  - B. What result is produced by the function?
It will print the converted integer and tell us whether the integer is invalid or not.
  - C. How is a success versus an error reported?
if err is 1, then it is a error, if err is 0 then it is success.
  - D. Why is this kind of conversion needed?
when we read a txt file, all the numbers we read are store as a string. To use then as integer we need this kind of conversion.
  - E. What built-in C function does this conversion?
atoi from <stdlib.h>
